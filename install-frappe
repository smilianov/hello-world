#!/bin/bash
# Frappe CRM v15 One-Click Installation Script for Ubuntu 24.04
# This script automates the complete installation of Frappe CRM v15 on a fresh Ubuntu 24.04 system
# Based on best practices from ERPNext installation script by GuNÂ®
# Version: 2.1 - Created: June 28, 2025, 23:33.33
# Features: Interactive site name selection, correct CRM branch detection, dynamic IP detection

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration variables (modify these as needed)
FRAPPE_USER="frappe"
SITE_NAME=""  # Will be prompted
MYSQL_ROOT_PASSWORD=""  # Will be prompted if not set
NODE_VERSION="18"
FRAPPE_BRANCH="version-15"
PRODUCTION_SETUP="no"  # Set to "yes" for production setup

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to get user input for site name
get_site_name() {
    echo
    print_status "Site Name Configuration"
    echo "Enter the site name for your Frappe CRM installation."
    echo "Examples:"
    echo "  - crm.localhost (for local development)"
    echo "  - mycompany.com (for production with domain)"
    echo "  - $(get_server_ip >/dev/null 2>&1; echo $SERVER_IP) (using server IP address)"
    echo "  - crm.mycompany.local (for internal network)"
    echo
    
    while true; do
        read -p "Enter site name: " SITE_NAME
        
        # Validate site name
        if [[ -z "$SITE_NAME" ]]; then
            print_error "Site name cannot be empty. Please try again."
            continue
        fi
        
        # Check for valid characters (simplified domain validation)
        if [[ ! "$SITE_NAME" =~ ^[a-zA-Z0-9.-]+$ ]]; then
            print_error "Invalid site name. Use only letters, numbers, dots, and hyphens."
            continue
        fi
        
        # Check for invalid patterns
        if [[ "$SITE_NAME" =~ ^[.-] ]] || [[ "$SITE_NAME" =~ [.-]$ ]] || [[ "$SITE_NAME" =~ \.\. ]] || [[ "$SITE_NAME" =~ -- ]]; then
            print_error "Invalid site name format. Cannot start/end with dots or hyphens, or have consecutive dots/hyphens."
            continue
        fi
        
        print_status "You entered: $SITE_NAME"
        read -p "Is this correct? (y/N): " -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            break
        fi
    done
    
    print_success "Site name set to: $SITE_NAME"
}

# Function to get production setup preference
get_production_preference() {
    echo
    print_status "Installation Type"
    echo "Choose installation type:"
    echo "  1. Development (bench start, accessible on port 8000)"
    echo "  2. Production (nginx, supervisor, systemd services)"
    echo
    
    while true; do
        read -p "Enter choice (1 for Development, 2 for Production): " choice
        case $choice in
            1)
                PRODUCTION_SETUP="no"
                print_success "Development setup selected"
                break
                ;;
            2)
                PRODUCTION_SETUP="yes"
                print_success "Production setup selected"
                break
                ;;
            *)
                print_error "Invalid choice. Please enter 1 or 2."
                ;;
        esac
    done
}

# Function to get server IP address
get_server_ip() {
    # Try multiple methods to get the primary IP address
    SERVER_IP=""
    
    # Method 1: Check default route
    SERVER_IP=$(ip route get 8.8.8.8 2>/dev/null | grep -oP 'src \K\S+' | head -n1)
    
    # Method 2: If method 1 fails, use hostname -I
    if [[ -z "$SERVER_IP" ]]; then
        SERVER_IP=$(hostname -I | awk '{print $1}')
    fi
    
    # Method 3: If still empty, use ip addr
    if [[ -z "$SERVER_IP" ]]; then
        SERVER_IP=$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | head -n1 | awk '{print $2}' | cut -d'/' -f1)
    fi
    
    # Method 4: Fallback to localhost
    if [[ -z "$SERVER_IP" ]]; then
        SERVER_IP="127.0.0.1"
        print_warning "Could not detect server IP, using localhost (127.0.0.1)"
    else
        print_status "Detected server IP: $SERVER_IP"
    fi
}
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root user for security reasons."
        print_status "Please run as a regular user with sudo privileges."
        exit 1
    fi
}

# Function to check Ubuntu version
check_ubuntu_version() {
    if [[ $(lsb_release -rs) != "24.04" ]]; then
        print_warning "This script is optimized for Ubuntu 24.04. You're running $(lsb_release -rs)."
        read -p "Do you want to continue? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Function to update system packages
update_system() {
    print_status "Updating system packages..."
    sudo apt-get update -y
    sudo apt-get upgrade -y
    print_success "System packages updated successfully"
}

# Function to create frappe user
create_frappe_user() {
    print_status "Creating frappe user..."
    if id "$FRAPPE_USER" &>/dev/null; then
        print_warning "User $FRAPPE_USER already exists"
    else
        sudo adduser --disabled-password --gecos "" $FRAPPE_USER
        sudo usermod -aG sudo $FRAPPE_USER
        print_success "User $FRAPPE_USER created successfully"
    fi
}

# Function to install basic packages
install_basic_packages() {
    print_status "Installing basic packages..."
    sudo apt-get install -y \
        git \
        python3-dev \
        python3.12-dev \
        python3-setuptools \
        python3-pip \
        python3.12-venv \
        python3-full \
        pipx \
        software-properties-common \
        libmysqlclient-dev \
        redis-server \
        xvfb \
        libfontconfig \
        wkhtmltopdf \
        curl \
        npm \
        build-essential \
        gettext \
        expect \
        jq
    print_success "Basic packages installed successfully"
}

# Function to install and configure Redis
configure_redis() {
    print_status "Configuring Redis..."
    
    # Stop Redis service
    sudo systemctl stop redis-server
    
    # Configure Redis
    sudo tee /etc/redis/redis.conf > /dev/null <<EOF
# Redis configuration for Frappe CRM
bind 127.0.0.1
port 6379
timeout 0
save 900 1
save 300 10
save 60 10000
rdbcompression yes
dbfilename dump.rdb
dir /var/lib/redis
maxmemory-policy allkeys-lru
maxmemory 256mb
EOF

    # Set proper permissions
    sudo chown redis:redis /etc/redis/redis.conf
    sudo chmod 640 /etc/redis/redis.conf
    
    # Start and enable Redis
    sudo systemctl start redis-server
    sudo systemctl enable redis-server
    
    # Test Redis connection
    sleep 2
    if redis-cli ping | grep -q "PONG"; then
        print_success "Redis configured and running successfully"
    else
        print_error "Redis configuration failed"
        exit 1
    fi
}

# Function to install and configure MariaDB
install_configure_mariadb() {
    print_status "Installing MariaDB..."
    sudo apt install -y mariadb-server mariadb-client
    
    print_status "Configuring MariaDB..."
    
    # Get MySQL root password if not set
    if [[ -z "$MYSQL_ROOT_PASSWORD" ]]; then
        while true; do
            read -s -p "Enter MySQL root password: " MYSQL_ROOT_PASSWORD
            echo
            read -s -p "Confirm MySQL root password: " MYSQL_ROOT_PASSWORD_CONFIRM
            echo
            if [[ "$MYSQL_ROOT_PASSWORD" == "$MYSQL_ROOT_PASSWORD_CONFIRM" ]]; then
                break
            else
                print_error "Passwords do not match. Please try again."
            fi
        done
    fi

    # Secure MariaDB installation - fix auth_socket issue
    print_status "Securing MariaDB installation..."
    sudo mysql <<EOF
ALTER USER 'root'@'localhost' IDENTIFIED BY '$MYSQL_ROOT_PASSWORD';
DELETE FROM mysql.user WHERE User='';
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
EOF

    # Create frappe database user
    print_status "Creating frappe database user..."
    sudo mysql -u root -p$MYSQL_ROOT_PASSWORD <<EOF
CREATE USER IF NOT EXISTS 'frappe'@'localhost' IDENTIFIED BY 'frappe123';
GRANT ALL PRIVILEGES ON *.* TO 'frappe'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;
EOF

    # Configure MySQL settings for Frappe
    print_status "Configuring MySQL settings..."
    sudo tee -a /etc/mysql/my.cnf > /dev/null <<EOF

[mysqld]
character-set-client-handshake = FALSE
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
innodb-file-format=barracuda
innodb-file-per-table=1
innodb-large-prefix=1

[mysql]
default-character-set = utf8mb4
EOF

    sudo service mysql restart
    print_success "MariaDB installed and configured successfully"
}

# Function to install Node.js via NVM
install_nodejs() {
    print_status "Installing Node.js..."
    
    # Install NVM for frappe user
    sudo -u $FRAPPE_USER bash << 'EOF'
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
EOF
    
    # Install Node.js for frappe user
    sudo -u $FRAPPE_USER bash << EOF
export NVM_DIR="/home/$FRAPPE_USER/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"
nvm install $NODE_VERSION
nvm use $NODE_VERSION
nvm alias default $NODE_VERSION
npm install -g yarn
EOF
    
    print_success "Node.js and Yarn installed successfully"
}

# Function to install Frappe Bench
install_frappe_bench() {
    print_status "Installing Frappe Bench..."
    
    # Install frappe-bench using pip with break-system-packages for Ubuntu 24.04
    sudo -H pip3 install frappe-bench --break-system-packages
    
    print_success "Frappe Bench installed successfully"
}

# Function to initialize bench as frappe user
initialize_bench() {
    print_status "Initializing Frappe Bench..."
    
    # Switch to frappe user and initialize bench
    sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER
export NVM_DIR="/home/$FRAPPE_USER/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"
nvm use $NODE_VERSION

# Initialize bench
bench init frappe-bench --frappe-branch $FRAPPE_BRANCH

# Configure Redis in common_site_config.json
cd frappe-bench
cat > sites/common_site_config.json << 'EOL'
{
  "redis_cache": "redis://127.0.0.1:6379",
  "redis_queue": "redis://127.0.0.1:6379",
  "redis_socketio": "redis://127.0.0.1:6379",
  "socketio_port": 9000,
  "background_workers": 1,
  "shallow_clone": true,
  "restart_supervisor_on_update": false,
  "restart_systemd_on_update": false,
  "serve_default_site": true,
  "reopen_log_files": true,
  "auto_update": false
}
EOL
EOF

    # Set proper permissions
    sudo chmod -R o+rx /home/$FRAPPE_USER/
    
    print_success "Frappe Bench initialized successfully with Redis configuration"
}

# Function to detect correct CRM branch and get app
get_crm_app() {
    print_status "Getting Frappe CRM app..."
    
    sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER/frappe-bench
export NVM_DIR="/home/$FRAPPE_USER/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"
nvm use $NODE_VERSION

# First, let's check what branches are available
echo "Checking available branches for Frappe CRM..."
git ls-remote --heads https://github.com/frappe/crm.git | grep -E "(main|master|version-15|v15)" || true

# Try different branch options in order of preference
CRM_BRANCHES=("main" "master" "develop")

for branch in "\${CRM_BRANCHES[@]}"; do
    echo "Trying to get CRM app with branch: \$branch"
    if bench get-app --branch \$branch crm https://github.com/frappe/crm; then
        echo "Successfully got CRM app using branch: \$branch"
        break
    else
        echo "Failed with branch: \$branch, trying next..."
    fi
done

# If all branches failed, try without specifying branch (gets default)
if [ ! -d "apps/crm" ]; then
    echo "Trying to get CRM app without specifying branch (default)..."
    bench get-app crm https://github.com/frappe/crm
fi
EOF

    # Verify CRM app was downloaded
    if sudo -u $FRAPPE_USER bash -c 'cd /home/frappe/frappe-bench && ls apps/ | grep -q crm'; then
        print_success "Frappe CRM app downloaded successfully"
    else
        print_error "Failed to download Frappe CRM app"
        exit 1
    fi
}

# Function to create site and install CRM
create_site_install_crm() {
    print_status "Creating site: $SITE_NAME and installing Frappe CRM..."
    
    sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER/frappe-bench
export NVM_DIR="/home/$FRAPPE_USER/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"
nvm use $NODE_VERSION

# Ensure Redis is accessible
echo "Testing Redis connection..."
redis-cli ping

# Create new site
echo "Creating site: $SITE_NAME"
bench new-site $SITE_NAME --admin-password admin --mariadb-root-password $MYSQL_ROOT_PASSWORD

# Install CRM app
echo "Installing CRM app on site: $SITE_NAME"
bench --site $SITE_NAME install-app crm

# Enable scheduler and disable maintenance mode
bench --site $SITE_NAME enable-scheduler
bench --site $SITE_NAME set-maintenance-mode off

# Set developer mode (for development installations)
if [[ "$PRODUCTION_SETUP" == "no" ]]; then
    bench --site $SITE_NAME set-config developer_mode 1
fi

# Set this site as default
bench use $SITE_NAME
EOF

    # Verify installation
    if sudo -u $FRAPPE_USER bash -c "cd /home/frappe/frappe-bench && bench --site $SITE_NAME list-apps | grep -q crm"; then
        print_success "Site created and Frappe CRM installed successfully"
    else
        print_error "CRM installation verification failed"
        exit 1
    fi
}

# Function to fix nginx configuration
fix_nginx_config() {
    print_status "Fixing nginx configuration..."
    
    # Add the missing log format to nginx.conf if it doesn't exist
    if ! grep -q "log_format main" /etc/nginx/nginx.conf; then
        print_status "Adding missing 'main' log format to nginx.conf..."
        sudo sed -i '/http {/a\\n\t# Frappe log format\n\tlog_format main '\''$remote_addr - $remote_user [$time_local] "$request" '\''\n\t\t\t'\''$status $body_bytes_sent "$http_referer" '\''\n\t\t\t'\''"$http_user_agent" "$http_x_forwarded_for"'\'';' /etc/nginx/nginx.conf
    fi
    
    print_success "Nginx configuration fixed"
}

# Function to setup production environment
setup_production() {
    if [[ "$PRODUCTION_SETUP" == "yes" ]]; then
        print_status "Setting up production environment..."
        
        # Install additional packages for production
        sudo apt update
        sudo apt install -y nginx supervisor fail2ban
        
        # Stop any conflicting services
        sudo systemctl stop apache2 2>/dev/null || true
        
        # Fix nginx configuration first
        fix_nginx_config
        
        # Setup production configuration manually to avoid prompts
        print_status "Setting up production configuration..."
        
        # Create nginx configuration
        sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER/frappe-bench
bench setup nginx --yes
EOF

        # Fix the log format issue in the generated nginx config
        sudo sed -i 's/access_log.*main;/access_log \/var\/log\/nginx\/access.log combined;/g' /home/$FRAPPE_USER/frappe-bench/config/nginx.conf
        
        # Copy nginx configuration
        sudo cp /home/$FRAPPE_USER/frappe-bench/config/nginx.conf /etc/nginx/sites-available/frappe-bench
        sudo ln -sf /etc/nginx/sites-available/frappe-bench /etc/nginx/sites-enabled/frappe-bench
        sudo rm -f /etc/nginx/sites-enabled/default
        
        # Test nginx configuration
        if sudo nginx -t; then
            print_success "Nginx configuration is valid"
        else
            print_error "Nginx configuration test failed"
            exit 1
        fi
        
        # Create supervisor configuration
        sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER/frappe-bench
bench setup supervisor --yes
sudo cp config/supervisor.conf /etc/supervisor/conf.d/frappe-bench.conf
EOF

        # Setup systemd services with automatic yes confirmation
        print_status "Setting up systemd services..."
        sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER/frappe-bench
# Use expect to automatically answer yes to systemd prompt
expect << 'EOD'
spawn bench setup systemd
expect "Do you want to continue? \[y/N\]:" { send "y\r" }
expect eof
EOD
EOF

        # Start and enable services
        sudo supervisorctl reread
        sudo supervisorctl update
        sudo supervisorctl start all
        sudo systemctl enable supervisor
        sudo systemctl enable nginx
        sudo systemctl restart nginx
        
        # Setup firewall
        sudo ufw allow 22,25,143,80,443,3306,3022,8000/tcp
        echo "y" | sudo ufw enable
        
        print_success "Production environment setup completed"
    fi
}

# Function to verify installation
verify_installation() {
    print_status "Verifying installation..."
    
    # Check Redis
    if redis-cli ping | grep -q "PONG"; then
        print_success "Redis is running correctly"
    else
        print_warning "Redis may not be running properly"
    fi
    
    # Check MariaDB
    if sudo mysql -u root -p$MYSQL_ROOT_PASSWORD -e "SELECT 1;" > /dev/null 2>&1; then
        print_success "MariaDB is accessible"
    else
        print_warning "MariaDB connection issues detected"
    fi
    
    # Check if site exists
    if sudo -u $FRAPPE_USER bash -c "cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME show-config" > /dev/null 2>&1; then
        print_success "Site configuration is valid"
    else
        print_warning "Site configuration issues detected"
    fi
    
    # Check Redis configuration in site config
    if sudo -u $FRAPPE_USER bash -c "cd /home/$FRAPPE_USER/frappe-bench && grep -q 'redis_cache' sites/common_site_config.json"; then
        print_success "Redis configuration is properly set"
    else
        print_warning "Redis configuration may be missing"
    fi
    
    # Check CRM installation
    if sudo -u $FRAPPE_USER bash -c "cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME list-apps | grep -q crm"; then
        print_success "Frappe CRM is properly installed"
    else
        print_warning "Frappe CRM installation verification failed"
    fi
}

# Function to start bench in development mode
start_development_server() {
    if [[ "$PRODUCTION_SETUP" == "no" ]]; then
        print_status "Starting Frappe CRM in development mode..."
        print_status "The server will start on port 8000"
        print_status "Press Ctrl+C to stop the server"
        echo
        
        sudo -u $FRAPPE_USER bash << EOF
cd /home/$FRAPPE_USER/frappe-bench
export NVM_DIR="/home/$FRAPPE_USER/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"
nvm use $NODE_VERSION

echo "Starting bench..."
bench start
EOF
    fi
}

# Function to display final information
display_final_info() {
    # Get current server IP
    get_server_ip
    
    # Get current time
    CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S %Z')
    
    print_success "Frappe CRM v15 installation completed successfully!"
    echo
    print_status "Installation Summary:"
    echo "  - Completion Time: $CURRENT_TIME"
    echo "  - Server IP: $SERVER_IP"
    echo "  - Frappe User: $FRAPPE_USER"
    echo "  - Site Name: $SITE_NAME"
    echo "  - Frappe Branch: $FRAPPE_BRANCH"
    echo "  - Production Setup: $PRODUCTION_SETUP"
    echo "  - Script Version: 2.1"
    echo
    
    if [[ "$PRODUCTION_SETUP" == "yes" ]]; then
        print_status "Access your Frappe CRM installation at:"
        echo "  - URL: http://$SERVER_IP"
        if [[ "$SITE_NAME" != "$SERVER_IP" ]]; then
            echo "  - OR: http://$SITE_NAME (if DNS configured)"
        fi
        echo "  - Username: Administrator"
        echo "  - Password: admin"
        echo
        print_status "Production services status:"
        echo "  - Nginx: $(systemctl is-active nginx 2>/dev/null || echo 'inactive')"
        echo "  - Supervisor: $(systemctl is-active supervisor 2>/dev/null || echo 'inactive')"
        echo "  - Redis: $(systemctl is-active redis-server 2>/dev/null || echo 'inactive')"
        echo "  - MariaDB: $(systemctl is-active mariadb 2>/dev/null || echo 'inactive')"
    else
        print_status "To start Frappe CRM in development mode:"
        echo "  sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench start'"
        echo "  Then access: http://$SERVER_IP:8000"
        if [[ "$SITE_NAME" != "$SERVER_IP" ]]; then
            echo "  OR: http://$SITE_NAME:8000 (if DNS configured)"
        fi
        echo "  - Username: Administrator"
        echo "  - Password: admin"
    fi
    
    echo
    print_status "Useful commands:"
    echo "  - Start bench: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench start'"
    echo "  - Restart bench: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench restart'"
    echo "  - Update CRM: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench update'"
    echo "  - Access bench console: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME console'"
    echo "  - Check Redis: redis-cli ping"
    echo "  - View logs: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME logs'"
    echo "  - Clear cache: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME clear-cache'"
    echo "  - List all sites: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && ls sites/'"
    
    echo
    print_status "Configuration files:"
    echo "  - Redis config: /etc/redis/redis.conf"
    echo "  - Site config: /home/$FRAPPE_USER/frappe-bench/sites/common_site_config.json"
    echo "  - Site specific config: /home/$FRAPPE_USER/frappe-bench/sites/$SITE_NAME/site_config.json"
    if [[ "$PRODUCTION_SETUP" == "yes" ]]; then
        echo "  - Nginx config: /etc/nginx/sites-available/frappe-bench"
        echo "  - Supervisor config: /etc/supervisor/conf.d/frappe-bench.conf"
    fi
    
    echo
    print_status "CRM Features:"
    echo "  - Lead Management"
    echo "  - Contact Management"
    echo "  - Deal Pipeline"
    echo "  - Activity Tracking"
    echo "  - Email Integration"
    echo "  - Custom Fields & Workflows"
    
    echo
    print_status "Troubleshooting:"
    echo "  - If site fails to load: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench restart'"
    echo "  - Check Redis: redis-cli ping"
    echo "  - View bench logs: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME logs'"
    echo "  - Clear cache: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench --site $SITE_NAME clear-cache'"
    echo "  - Rebuild assets: sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench build'"
}

# Function to handle cleanup on error
cleanup_on_error() {
    print_error "Installation failed. Performing cleanup..."
    # Stop any running bench processes
    sudo pkill -f "bench start" 2>/dev/null || true
    exit 1
}

# Main installation function
main() {
    echo "======================================"
    echo "Frappe CRM v15 Installation Script"
    echo "Ubuntu 24.04 One-Click Installer"
    echo "Version: 2.1 - $(date '+%Y-%m-%d %H:%M:%S %Z')"
    echo "======================================"
    echo
    
    # Set trap for cleanup on error
    trap cleanup_on_error ERR
    
    # Pre-installation checks
    check_root
    check_ubuntu_version
    
    # Get user preferences
    get_site_name
    get_production_preference
    
    # Confirm installation
    echo
    print_status "Installation Configuration Summary:"
    echo "  - Frappe User: $FRAPPE_USER"
    echo "  - Site Name: $SITE_NAME"
    echo "  - Installation Type: $([ "$PRODUCTION_SETUP" == "yes" ] && echo "Production" || echo "Development")"
    echo
    read -p "Do you want to continue with this configuration? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Installation cancelled by user"
        exit 0
    fi
    
    # Installation steps
    update_system
    create_frappe_user
    install_basic_packages
    configure_redis
    install_configure_mariadb
    install_nodejs
    install_frappe_bench
    initialize_bench
    get_crm_app
    create_site_install_crm
    setup_production
    verify_installation
    
    # Display final information
    display_final_info
    
    # Start development server if not production
    if [[ "$PRODUCTION_SETUP" == "no" ]]; then
        echo
        read -p "Do you want to start the development server now? (y/N): " -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            start_development_server
        else
            print_status "To start the server later, run:"
            echo "  sudo -u $FRAPPE_USER bash -c 'cd /home/$FRAPPE_USER/frappe-bench && bench start'"
        fi
    fi
}

# Run main function
main "$@"
